name: Build, Test

on:
  pull_request:
    branches: ["master"]
    types:
      - opened
      - edited
      - synchronize
  push:
    branches: ["master"]
  workflow_dispatch:
  merge_group:

# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#concurrency
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  NEXT_PUBLIC_INFURA_KEY: ${{ secrets.NEXT_PUBLIC_INFURA_KEY }}
  NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID }}
  THE_GRAPH_NETWORK_API_KEY: ${{ secrets.THE_GRAPH_NETWORK_API_KEY }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  IS_HOTFIX: ${{ contains(github.event.pull_request.title, 'hotfix') }}

jobs:
  check-is-hotfix:
    name: Check if PR is hotfix
    runs-on: ubuntu-latest
    outputs:
      is_hotfix: ${{ steps.check-is-hotfix.outputs.is_hotfix }}

    steps:
      - name: Make IS_HOTFIX env var global
        id: check-is-hotfix
        run: |
          echo "is_hotfix=${{ env.IS_HOTFIX }}" >> $GITHUB_OUTPUT

  check-files:
    name: Check files
    outputs:
      run_tests: ${{ steps.check-files.outputs.run_tests }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      # run tests only if specific files are changed
      - name: Check modified files
        id: check-files
        run: |
          echo "=============== list modified files ==============="
          files=`git diff --name-only HEAD^ HEAD`
          echo "$files"
          for file in $files; do
            if [[ $file != packages/* ]] && ! [[ $file =~ .*\.(lock|yml)$ ]]; then
              # if not in packages/ and does not end with .lock or .yml
              echo "run_tests=false" >> $GITHUB_OUTPUT
            elif [[ $file == .github/ISSUE_TEMPLATE/* ]]; then
              echo "run_tests=false" >> $GITHUB_OUTPUT
            elif [[ $file =~ .*\.(md|svg|png|webp|gif|txt)$ ]]; then
              echo "run_tests=false" >> $GITHUB_OUTPUT
            else
              echo "run_tests=true" >> $GITHUB_OUTPUT
              break
            fi
          done
        shell: bash

  build:
    name: "Build"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install node_modules
        uses: OffchainLabs/actions/node-modules/install@main

      - name: Build
        run: yarn build
        env:
          NEXT_PUBLIC_IS_E2E_TEST: true
          NEXT_PUBLIC_INFURA_KEY: ${{ secrets.NEXT_PUBLIC_INFURA_KEY }}
          NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID }}
          THE_GRAPH_NETWORK_API_KEY: ${{ secrets.THE_GRAPH_NETWORK_API_KEY }}

      - name: Cache build artifacts
        uses: ./.github/actions/build-artifacts/cache

  test-ui:
    name: "Test UI"
    runs-on: ubuntu-latest
    needs: [build, check-files]
    if: needs.check-files.outputs.run_tests == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install node_modules
        uses: OffchainLabs/actions/node-modules/install@main

      - name: Restore build artifacts
        uses: ./.github/actions/build-artifacts/restore

      - name: Start UI and Test
        run: yarn start-server-and-test 'start' http://127.0.0.1:3000 'yarn test:ci'

  audit:
    name: "Audit"
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install node_modules
        uses: OffchainLabs/actions/node-modules/install@main

      - name: Run audit
        run: yarn audit:ci

  check-formatting:
    name: "Check Formatting"
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install node_modules
        uses: OffchainLabs/actions/node-modules/install@main

      - name: Check formatting with Prettier
        run: yarn prettier:check

      - name: Check formatting with ESLint
        run: yarn lint

  e2e-tests:
    name: "E2E Tests"
    needs: [build, check-files]
    if: needs.check-files.outputs.run_tests == 'true'
    uses: ./.github/workflows/e2e-tests.yml
    with:
      test_type: 'regular'
    secrets: inherit

  test-e2e-success:
    name: "Test E2E Success"
    runs-on: ubuntu-latest
    needs: [e2e-tests]
    if: always()
    steps:
      - name: Regular E2E Succeeded
        if: needs.e2e-tests.result == 'success' || needs.e2e-tests.result == 'skipped'
        run: echo "Regular E2E tests passed"

      - name: Regular E2E Failed
        if: needs.e2e-tests.result != 'success' && needs.e2e-tests.result != 'skipped'
        run: exit 1
