name: Build, Test

on:
  pull_request:
    branches: ["master"]
    types:
      - opened
      - edited
      - synchronize
  push:
    branches: ["master"]
  workflow_dispatch:
  merge_group:

# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#concurrency
concurrency:
  # github.workflow: name of the workflow
  # github.event.pull_request.number || github.ref: pull request number or branch name if not a pull request
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  NEXT_PUBLIC_INFURA_KEY: ${{ secrets.NEXT_PUBLIC_INFURA_KEY }}
  NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID }}
  THE_GRAPH_NETWORK_API_KEY: ${{ secrets.THE_GRAPH_NETWORK_API_KEY }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  IS_HOTFIX: ${{ contains(github.event.pull_request.title, 'hotfix') }}

jobs:
  check-is-hotfix:
    name: Check if PR is hotfix
    runs-on: ubuntu-latest
    outputs:
      is_hotfix: ${{ steps.check-is-hotfix.outputs.is_hotfix }}

    steps:
      - name: Make IS_HOTFIX env var global
        id: check-is-hotfix
        run: |
          echo "is_hotfix=${{ env.IS_HOTFIX }}" >> $GITHUB_OUTPUT

  check-files:
    name: Check files
    outputs:
      run_tests: ${{ steps.check-files.outputs.run_tests }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      # run tests only if specific files are changed
      - name: Check modified files
        id: check-files
        run: |
          echo "=============== list modified files ==============="
          files=`git diff --name-only HEAD^ HEAD`
          echo "$files"
          for file in $files; do
            if [[ $file != packages/* ]] && ! [[ $file =~ .*\.(lock|yml)$ ]]; then
              # if not in packages/ and does not end with .lock or .yml
              echo "run_tests=false" >> $GITHUB_OUTPUT
            elif [[ $file == .github/ISSUE_TEMPLATE/* ]]; then
              echo "run_tests=false" >> $GITHUB_OUTPUT
            elif [[ $file =~ .*\.(md|svg|png|webp|gif|txt)$ ]]; then
              echo "run_tests=false" >> $GITHUB_OUTPUT
            else
              echo "run_tests=true" >> $GITHUB_OUTPUT
              break
            fi
          done
        shell: bash

  install:
    name: "Install"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install node_modules
        uses: OffchainLabs/actions/node-modules/install@main

  build:
    name: "Build"
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Restore node_modules
        uses: OffchainLabs/actions/node-modules/restore@main

      - name: Build
        run: yarn build

      - name: Cache build artifacts
        uses: ./.github/actions/build-artifacts/cache

  test-ui:
    name: "Test UI"
    runs-on: ubuntu-latest
    needs: [build, check-files]
    if: needs.check-files.outputs.run_tests == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Restore node_modules
        uses: OffchainLabs/actions/node-modules/restore@main

      - name: Restore build artifacts
        uses: ./.github/actions/build-artifacts/restore

      - name: Start UI and Test
        run: yarn start-server-and-test 'dev' http://localhost:3000 'yarn test:ci'

  audit:
    name: "Audit"
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Restore node_modules
        uses: OffchainLabs/actions/node-modules/restore@main

      - name: Run audit
        run: yarn audit:ci

  check-formatting:
    name: "Check Formatting"
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Restore node_modules
        uses: OffchainLabs/actions/node-modules/restore@main

      - name: Check formatting with Prettier
        run: yarn prettier:check

      - name: Check formatting with ESLint
        run: yarn lint

  load-e2e-files:
    name: "Load e2e files"
    runs-on: ubuntu-latest
    needs: [install, check-is-hotfix]
    if: needs.check-is-hotfix.outputs.is_hotfix == 'false'
    outputs:
      matrix: ${{ steps.set-matrix.outputs.e2eFiles }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - id: set-matrix
        run: |
          content=`cat packages/arb-token-bridge-ui/tests/e2e/specfiles.json | jq --compact-output .`
          echo "e2eFiles=$content" >> $GITHUB_OUTPUT

  test-e2e:
    name: "Test E2E"
    runs-on: ubuntu-latest
    needs: [install, check-files, check-is-hotfix, load-e2e-files]
    if: needs.check-files.outputs.run_tests == 'true' && needs.check-is-hotfix.outputs.is_hotfix == 'false'
    strategy:
      fail-fast: false # If one test fails, let the other tests run
      matrix:
        tests:
          ${{ fromJson(needs.load-e2e-files.outputs.matrix) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Restore node_modules
        uses: OffchainLabs/actions/node-modules/restore@main

      - name: Install Cypress
        run: yarn cypress install

      - name: Install dependencies
        run: yarn install --frozen-lockfile --prefer-offline

      - name: Install linux deps
        run: |
          sudo apt-get install --no-install-recommends -y \
          fluxbox \
          xvfb

      - name: Run xvfb and fluxbox
        run: |
          Xvfb :0 -screen 0 1024x768x24 -listen tcp -ac &
          fluxbox &
        env:
          DISPLAY: :0.0

      - name: Make .e2e.env
        uses: SpicyPizza/create-envfile@v1.3
        with:
          envkey_PRIVATE_KEY_CUSTOM: ${{ secrets.E2E_PRIVATE_KEY }}
          envkey_PRIVATE_KEY_USER: ${{ secrets.E2E_PRIVATE_KEY_USER }}
          envkey_NEXT_PUBLIC_INFURA_KEY: ${{ secrets.NEXT_PUBLIC_INFURA_KEY }}
          envkey_CYPRESS_RECORD_VIDEO: ${{ matrix.tests.recordVideo }}
          envkey_SKIP_METAMASK_SETUP: true
          envkey_NEXT_PUBLIC_LOCAL_ETHEREUM_RPC_URL: http://geth:8545
          envkey_NEXT_PUBLIC_LOCAL_ARBITRUM_RPC_URL: http://sequencer:8547
          envkey_TEST_FILE: ${{ matrix.tests.file }}
          envkey_NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID }}
          envkey_THE_GRAPH_NETWORK_API_KEY: ${{ secrets.THE_GRAPH_NETWORK_API_KEY }}
          directory: ./packages/arb-token-bridge-ui/
          file_name: .e2e.env

      - name: Make .env
        uses: SpicyPizza/create-envfile@v1.3
        with:
          envkey_NEXT_PUBLIC_IS_E2E_TEST: true
          envkey_NEXT_PUBLIC_INFURA_KEY: ${{ secrets.NEXT_PUBLIC_INFURA_KEY }}
          envkey_NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID }}
          envkey_THE_GRAPH_NETWORK_API_KEY: ${{ secrets.THE_GRAPH_NETWORK_API_KEY }}
          directory: ./packages/arb-token-bridge-ui/
          file_name: .env

      - name: Make synpress .env
        uses: SpicyPizza/create-envfile@v1.3
        with:
          envkey_CYPRESS_GROUP: medium-resolution
          envkey_DISPLAY_HEIGHT: 768
          envkey_DISPLAY_WIDTH: 1366
          envkey_SE_SCREEN_HEIGHT: 768
          envkey_SE_SCREEN_WIDTH: 1366
          file_name: medium-res.env

      - name: Set up the local node
        uses: OffchainLabs/actions/run-nitro-test-node@e3b7f5bdfc62cad21026c1d1f424f3fbadc046e0
        with:
          nitro-testnode-ref: old-release-v2.1.1

      - name: Run e2e tests (cypress-action)
        uses: cypress-io/github-action@248bde77443c376edc45906ede03a1aba9da0462 # pin@v5.8.4
        with:
          start: yarn start
          command: yarn test:ci:e2e
          wait-on: 'http://localhost:3000'
          wait-on-timeout: 120
          browser: chrome
          spec: ./packages/arb-token-bridge-ui/tests/e2e/specs/*

      - name: Throw error if tests failed
        if: steps.e2e-run.outputs.status == 'failed'
        run: exit 1

  test-e2e-success:
    name: "Test E2E Success"
    runs-on: ubuntu-latest
    needs: [test-e2e]
    if: always()
    steps:
      - name: E2E Succeeded
        if: needs.test-e2e.result == 'success' || needs.test-e2e.result == 'skipped'
        run: echo "nice"

      - name: E2E Failed
        if: needs.test-e2e.result != 'success' && needs.test-e2e.result != 'skipped'
        run: exit 1

  clean-up:
    name: "Clean Up"
    runs-on: ubuntu-latest
    needs: [test-ui]
    if: always()
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install gh-actions-cache
        run: gh extension install actions/gh-actions-cache

      - name: Delete build artifacts
        run: |
          if gh actions-cache list | grep build-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
          then
            gh actions-cache delete build-artifacts-${{ github.run_id }}-${{ github.run_attempt }} --confirm
          fi
        shell: bash
