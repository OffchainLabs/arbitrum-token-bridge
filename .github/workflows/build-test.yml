name: Build, Test

on:
  pull_request:
    branches: ["master"]
  push:
    branches: ["master"]
  workflow_dispatch:

jobs:
  install:
    name: "Install"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Check cache for "node_modules"
        id: cache
        uses: martijnhols/actions-cache/check@v3
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile

      - name: Save "node_modules" to cache
        if: steps.cache.outputs.cache-hit != 'true'
        uses: martijnhols/actions-cache/save@v3
        with:
          path: "**/node_modules"
          key: ${{ steps.cache.outputs.primary-key }}

  build:
    name: "Build"
    runs-on: ubuntu-latest
    needs: install
    steps:
      - uses: actions/checkout@v3

      - name: "Restore 'node_modules' from cache"
        uses: ./.github/actions/restore-cache

      - name: Build
        run: yarn build

      - name: "Upload build artifacts"
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            ./packages/arb-token-bridge-ui/build
            ./packages/token-bridge-sdk/dist
            ./packages/use-wallet/dist

  test-sdk:
    name: "Test SDK"
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3

      - name: "Restore 'node_modules' from cache"
        uses: ./.github/actions/restore-cache

      - name: "Download build artifacts"
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: ./packages

      - name: Test
        run: yarn test:ci:sdk

  test-ui:
    name: "Test UI"
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3

      - name: "Restore 'node_modules' from cache"
        uses: ./.github/actions/restore-cache

      - name: "Download build artifacts"
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: ./packages

      - name: Test
        run: yarn test:ci:ui

  test-e2e:
    name: "Test E2E"
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3

      - name: "Run Nitro test node"
        uses: OffchainLabs/actions/run-nitro-test-node@main

      - name: "Restore 'node_modules' from cache"
        uses: ./.github/actions/restore-cache

      - name: "Download build artifacts"
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: ./packages

      - name: "Install the Cypress binary"
        run: |
          yarn test:ci:e2e:install
          cp ./node_modules/.bin/cypress /home/runner/.cache/cypress
          mv /home/runner/.cache/cypress /home/runner/.cache/Cypress

      - name: Copy .env
        run: cp ./packages/arb-token-bridge-ui/.e2e.env.sample ./packages/arb-token-bridge-ui/.e2e.env

      - name: Run tests
        run: CYPRESS_CACHE_FOLDER=$GITHUB_WORKSPACE yarn test:ci:e2e

  audit:
    name: "Audit"
    runs-on: ubuntu-latest
    needs: install
    steps:
      - uses: actions/checkout@v3

      - name: "Restore 'node_modules' from cache"
        uses: ./.github/actions/restore-cache

      - name: Run audit
        run: yarn audit:ci

  check-formatting:
    name: "Check Formatting"
    runs-on: ubuntu-latest
    needs: install
    steps:
      - uses: actions/checkout@v3

      - name: "Restore 'node_modules' from cache"
        uses: ./.github/actions/restore-cache

      - name: Check formatting with Prettier
        run: yarn prettier:check
