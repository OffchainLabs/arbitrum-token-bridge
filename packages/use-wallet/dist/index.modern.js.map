{"version":3,"file":"index.modern.js","sources":["../src/index.ts"],"sourcesContent":["import { useCallback } from 'react'\nimport Web3Modal, { ICoreOptions } from 'web3modal'\nimport { Network, Web3Provider } from '@ethersproject/providers'\nimport create from 'zustand'\n\ntype State = {\n  provider: Web3Provider\n  account: Account\n  network: Network\n  web3Modal: Web3Modal\n}\n\nconst useStore = create<Partial<State>>(_set => ({\n  web3Modal: typeof window !== 'undefined' ? new Web3Modal() : undefined\n}))\n\ntype Account = string\ntype ConnectWallet = (opts?: Partial<ICoreOptions>) => Promise<State>\ntype DisconnectWallet = () => void\ntype UseWallet = () => Partial<State> & {\n  connect: ConnectWallet\n  disconnect: DisconnectWallet\n}\n\nexport const useWallet: UseWallet = () => {\n  // Retreive the current values from the store, and automatically re-render on updates\n  const account = useStore(state => state.account)\n  const network = useStore(state => state.network)\n  const provider = useStore(state => state.provider)\n  const web3Modal = useStore(state => state.web3Modal)\n\n  const connect: ConnectWallet = useCallback(async opts => {\n    // Launch modal with the given options\n    const web3Modal = new Web3Modal(opts)\n    const web3ModalProvider = await web3Modal.connect()\n\n    // Set up Ethers provider and initial state with the response from the web3Modal\n    const initialProvider = new Web3Provider(web3ModalProvider, 'any')\n    const getNetwork = () => initialProvider.getNetwork()\n    const initialAccounts = await initialProvider.listAccounts()\n    const initialNetwork = await getNetwork()\n\n    const nextState = {\n      web3Modal,\n      provider: initialProvider,\n      network: initialNetwork,\n      account: initialAccounts[0]\n    }\n\n    // Set up event listeners to handle state changes\n    web3ModalProvider.on('accountsChanged', (accounts: string[]) => {\n      useStore.setState({ account: accounts[0] })\n    })\n\n    web3ModalProvider.on('chainChanged', async (_chainId: string) => {\n      const network = await getNetwork()\n      useStore.setState({ network })\n    })\n\n    web3ModalProvider.on('disconnect', () => {\n      web3Modal.clearCachedProvider()\n    })\n\n    useStore.setState(nextState)\n    return nextState\n  }, [])\n\n  const disconnect: DisconnectWallet = useCallback(async () => {\n    web3Modal?.clearCachedProvider()\n    useStore.setState({\n      provider: undefined,\n      network: undefined,\n      account: undefined\n    })\n  }, [web3Modal])\n\n  return {\n    connect,\n    provider,\n    account,\n    network,\n    disconnect,\n    web3Modal\n  }\n}\n"],"names":["useStore","create","_set","web3Modal","window","Web3Modal","undefined","useWallet","account","state","network","provider","connect","useCallback","async","opts","web3ModalProvider","initialProvider","Web3Provider","getNetwork","initialAccounts","listAccounts","initialNetwork","nextState","on","accounts","setState","clearCachedProvider","disconnect"],"mappings":"4IAYA,MAAMA,EAAWC,EAAuBC,IAAS,CAC/CC,UAA6B,oBAAXC,OAAyB,IAAIC,OAAcC,KAWlDC,EAAuBA,KAElC,MAAMC,EAAUR,EAASS,GAASA,EAAMD,SAClCE,EAAUV,EAASS,GAASA,EAAMC,SAClCC,EAAWX,EAASS,GAASA,EAAME,UACnCR,EAAYH,EAASS,GAASA,EAAMN,WAEpCS,EAAyBC,EAAYC,UAEzC,MAAMX,EAAY,IAAIE,EAAUU,GAC1BC,QAA0Bb,EAAUS,UAGpCK,EAAkB,IAAIC,EAAaF,EAAmB,OACtDG,EAAaA,IAAMF,EAAgBE,aACnCC,QAAwBH,EAAgBI,eACxCC,QAAuBH,IAEvBI,EAAY,CAChBpB,YACAQ,SAAUM,EACVP,QAASY,EACTd,QAASY,EAAgB,IAkB3B,OAdAJ,EAAkBQ,GAAG,kBAAoBC,IACvCzB,EAAS0B,SAAS,CAAElB,QAASiB,EAAS,IAAI,GAG5CT,EAAkBQ,GAAG,eAAgBV,UACnC,MAAMJ,QAAgBS,IACtBnB,EAAS0B,SAAS,CAAEhB,WAAS,GAG/BM,EAAkBQ,GAAG,aAAc,KACjCrB,EAAUwB,qBAAmB,GAG/B3B,EAAS0B,SAASH,GACXA,GACN,IAWH,MAAO,CACLX,UACAD,WACAH,UACAE,UACAkB,WAdmCf,EAAYC,gBAC/CX,GAAAA,EAAWwB,sBACX3B,EAAS0B,SAAS,CAChBf,cAAUL,EACVI,aAASJ,EACTE,aAASF,GACV,EACA,CAACH,IAQFA"}